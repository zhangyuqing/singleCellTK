% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batchSCE.R
\name{batchSCE}
\alias{batchSCE}
\alias{ComBatSCE}
\alias{ComBatSeqSCE}
\title{Run batch correction methods on a SCtkExperiment object}
\usage{
batchSCE(inSCE, batch, group = NULL, covariates = NULL, bea_method,
  useAssay = "logcounts", par.prior = "Parametric",
  mean.only = FALSE, ref.batch = NULL, shrink = FALSE,
  gene.subset.n = NULL)

ComBatSCE(inSCE, batch, useAssay = "logcounts",
  par.prior = "Parametric", covariates = NULL, mean.only = FALSE,
  ref.batch = NULL)

ComBatSeqSCE(inSCE, batch, group = NULL, covariates = NULL,
  shrink = FALSE, gene.subset.n = NULL)
}
\arguments{
\item{inSCE}{Input SCtkExperiment object. Required}

\item{batch}{The name of a column in colData to use as the batch variable}

\item{group}{The name of a column in colData to use as primary condition variable}

\item{covariates}{List of other column names in colData to be added to the
ComBat model as covariates
Combat parameters}

\item{useAssay}{The assay to use for ComBat. The default is "logcounts"}

\item{par.prior}{TRUE indicates parametric adjustments will be used, FALSE
indicates non-parametric adjustments will be used. Accepted parameters:
"Parametric" or "Non-parametric"}

\item{mean.only}{If TRUE ComBat only corrects the mean of the batch effect}

\item{ref.batch}{If given, will use the selected batch as a reference for
batch adjustment.
Combatseq parameters}

\item{shrink}{If TRUE uses empirical Bayes to estimate batch effect parameters}

\item{gene.subset.n}{Number of genes to use for empirical Bayes estimation. If not 
specified and shrink=TRUE, use 1000 random genes}
}
\value{
Batch adjusted matrix based on inputs. You can save this matrix into the
SCtkExperiment with assay()
}
\description{
Run batch correction methods on a SCtkExperiment object
}
\section{Functions}{
\itemize{
\item \code{ComBatSCE}: Perform batch correction with combat

\item \code{ComBatSeqSCE}: Perform batch correction with combat-seq
}}

\examples{
if(requireNamespace("bladderbatch", quietly = TRUE)) {
  library(bladderbatch)
  data(bladderdata)

  #subset for testing
  dat <- bladderEset[1:50,]
  dat <- as(as(dat, "SummarizedExperiment"), "SCtkExperiment")
  mod <- stats::model.matrix(~as.factor(cancer), data = colData(dat))

  # parametric adjustment
  combat_edata1 <- batchSCE(inSCE = dat, useAssay = "exprs", bea_method='ComBat',
                             batch = "batch")
  assay(dat, "parametric_combat") <- combat_edata1
}

if(requireNamespace("bladderbatch", quietly = TRUE)) {
  library(bladderbatch)
  data(bladderdata)

  #subset for testing
  dat <- bladderEset[1:50,]
  dat <- as(as(dat, "SummarizedExperiment"), "SCtkExperiment")
  mod <- stats::model.matrix(~as.factor(cancer), data = colData(dat))

  # parametric adjustment
  combat_edata1 <- ComBatSCE(inSCE = dat, useAssay = "exprs",
                             batch = "batch", covariates = NULL)
  assay(dat, "parametric_combat") <- combat_edata1

  # non-parametric adjustment, mean-only version
  combat_edata2 <- ComBatSCE(inSCE = dat, useAssay = "exprs",
                             batch = "batch", par.prior = "Non-parametric",
                             mean.only = TRUE, covariates = NULL)
  assay(dat, "nonparametric_combat_meanonly") <- combat_edata2

  # reference-batch version, with covariates
  combat_edata3 <- ComBatSCE(inSCE = dat, useAssay = "exprs",
                             batch = "batch", covariates = "cancer",
                             ref.batch = 3)
  assay(dat, "refbatch_combat_wcov") <- combat_edata3
  assays(dat)
}

if(requireNamespace("BatchQC", quietly = TRUE)) {
  library(BatchQC)
  nbatch <- 3
  ncond <- 2
  npercond <- 5
  dat <- rnaseq_sim(ngenes=50, nbatch=nbatch, ncond=ncond, npercond=npercond)
  df <- data.frame(batch = rep(1:nbatch, each=ncond*npercond), 
                   condition = rep(rep(1:ncond, each=npercond), nbatch))
  se <- SummarizedExperiment(assays=list(counts=dat), colData=as(df, "DataFrame"))
  dat <- as(se, "SCtkExperiment")

  combatseq_counts <- ComBatSeqSCE(inSCE = dat, batch = "batch", group="condition")
  assay(dat, "combatseq") <- combatseq_counts
}

}
